---
title: "Analisis_propensiones"
format: html
editor: visual
---

# Carga de Librerías

```{r}
if(!require('pacman')){install.packages('pacman')}
pacman::p_load(tidyverse,survey, tableone, ggpubr)
```

```{r}
datos_imputados <- readRDS('Datos_imputados.rds') %>% 
  select(c(-NHC), identificador, everything())
```

```{r}
datos_imputados
```

```{r}
datos_imputados_transformados <- datos_imputados %>% 
  mutate(
    DIabetes = droplevels(DIabetes,c('Metformina', 'Altres','ADO', 'dieta', 'ADO+Insulina','metformina+altres','ADO')),
    SignesIndirectes_HTP = droplevels(SignesIndirectes_HTP,c('dubtós')),
    presenciaCSPH = case_when(presenciaCSPH =='indeterminat' ~ 'no CSPH', TRUE ~ presenciaCSPH)
  ) %>%
  select('identificador','Grup_IQ','edat_IQ','sexe_home',"IMC",'etiol_OH','Enol_Actiu',
         "Charlson_Index","plaquetes_preIQ","DIabetes",'Pughpunts_basal',
         'colaterals_shunts','MELD_basal','Alb_gL_preIQ','INR_preIQ','BB_mgdL_preIQ','Creat_mgdL_preIQ',
         'HCC_prev','SignesIndirectes_HTP')
```

```{r}
variables_propensity <- c(
  'Grup_IQ','edat_IQ','sexe_home',"IMC",'etiol_OH','Enol_Actiu',
  "Charlson_Index","plaquetes_preIQ","DIabetes",'Pughpunts_basal',
  'colaterals_shunts','MELD_basal','Alb_gL_preIQ','INR_preIQ','BB_mgdL_preIQ','Creat_mgdL_preIQ',
  'HCC_prev','SignesIndirectes_HTP')
```


# Modelo propensity 1: todo mal

### Ajuste del modelo

```{r}
mod_propensity_1 <- glm(
  formula = Grup_IQ ~  
    HCC_prev +
    sexe_home +
    Charlson_Index
    ,
  data = datos_imputados_transformados, 
  family=binomial(link="logit") )
```

### Sacando IPTW

```{r}


datos_imputados_propensity_1 <- datos_imputados_transformados %>% 
  mutate( prediciones = predict( mod_propensity_1 , datos_imputados_transformados , type="response") )

datos_imputados_propensity_1 <- datos_imputados_propensity_1 %>% 
  mutate(standarized_weights = case_when(
    Grup_IQ == 'Si IQ' ~ (177/(371))/ (  prediciones),
    Grup_IQ == 'No IQ' ~ (194/(371))/ (1-prediciones) 
  )) 

```

### Revisión

```{r}
datos_imputados_propensity_1
```

```{r}

ggpubr::ggarrange(
  plotlist = list(
    datos_imputados_propensity_1 %>%
      ggplot(aes(standarized_weights, fill = Grup_IQ)) +
      geom_density() +
      labs(x = 'probabilidad de pertenecer grup Si en propensity')
    ,
    datos_imputados_propensity_1 %>%
      ggplot(aes(standarized_weights, fill = Grup_IQ)) +
      geom_density(alpha = 0.6) +
      labs(x = 'probabilidad de pertenecer grup Si en propensity')
    
    ,
    datos_imputados_propensity_1 %>%
      ggplot(aes(prediciones, fill = Grup_IQ)) +
      geom_histogram(color = 'black', alpha = 1) +
      labs(x = 'probabilidad de pertenecer grup Si en propensity')
    ,
    datos_imputados_propensity_1 %>%
      ggplot(aes(prediciones, fill = Grup_IQ)) +
      geom_histogram(color = 'black', alpha = 0.6) +
      labs(x = 'probabilidad de pertenecer grup Si en propensity')
  ))
  
```

```{r}

iptwdatos_propensity_survey_1 <- svydesign(
  ids = ~ 1, 
  data = datos_imputados_propensity_1,
  strata = ~Grup_IQ,
  weights = ~ datos_imputados_propensity_1$standarized_weights)

Propensity_table_Weighted_1 <- svyCreateTableOne(
  vars= datos_imputados_propensity_1 %>% select(-c(Grup_IQ, identificador,standarized_weights,prediciones )) %>% names(),
  strata = "Grup_IQ", 
  data = iptwdatos_propensity_survey_1, 
  addOverall = T,
  includeNA = T,
  smd =TRUE)

print(Propensity_table_Weighted_1, smd = TRUE)

```


# Modelo propensity 2: mejor, pero todavía no cuadra

Supón que ha habido unos 300 modelos entremedio, pero ya está. **No hemos conseguido afinar más la fórmula**. Esta es el mejor propensity que hemos logrado. Veamos que tal ajusta.


### Ajuste del modelo

```{r}

mod_propensity_2 <- glm(
  formula = Grup_IQ ~  
    SignesIndirectes_HTP + 
    HCC_prev +
    DIabetes +
    sexe_home +
    Enol_Actiu + 
    plaquetes_preIQ +
    log(sqrt(Charlson_Index)) +
    Alb_gL_preIQ +
    log(IMC) +
    Pughpunts_basal +
    log(BB_mgdL_preIQ) +
    Creat_mgdL_preIQ +
    INR_preIQ
    ,

  data = datos_imputados_transformados, 
  family=binomial(link="logit") )
```


### Sacando IPTW

```{r}

datos_imputados_propensity_2 <- datos_imputados_transformados %>% 
  mutate(prediciones = predict(mod_propensity_2, datos_imputados_transformados, type = "response"))

datos_imputados_propensity_2 <- datos_imputados_propensity_2 %>% 
  mutate(standarized_weights = case_when(
    Grup_IQ == 'Si IQ' ~ (177/(371))/ (  prediciones),
    Grup_IQ == 'No IQ' ~ (194/(371))/ (1-prediciones) 
  )) 

```

```{r}
datos_imputados_propensity_2
```

### Revisión

```{r}

ggpubr::ggarrange(
  plotlist = list(
    datos_imputados_propensity_2 %>%
      ggplot(aes(standarized_weights, fill = Grup_IQ)) +
      geom_density() +
      labs(x = 'probabilidad de pertenecer grup Si en propensity')
    ,
    datos_imputados_propensity_2 %>%
      ggplot(aes(standarized_weights, fill = Grup_IQ)) +
      geom_density(alpha = 0.6) +
      labs(x = 'probabilidad de pertenecer grup Si en propensity')
    
    ,
    datos_imputados_propensity_2 %>%
      ggplot(aes(prediciones, fill = Grup_IQ)) +
      geom_histogram(color = 'black', alpha = 1) +
      labs(x = 'probabilidad de pertenecer grup Si en propensity')
    ,
    datos_imputados_propensity_2 %>%
      ggplot(aes(prediciones, fill = Grup_IQ)) +
      geom_histogram(color = 'black', alpha = 0.6) +
      labs(x = 'probabilidad de pertenecer grup Si en propensity')
  ))
  
```

```{r}

iptwdatos_propensity_2 <- svydesign(
  ids = ~ 1, 
  data = datos_imputados_propensity_2,
  strata = ~Grup_IQ,
  weights = ~ datos_imputados_propensity_2$standarized_weights)

Propensity_table_Weighted_2 <- svyCreateTableOne(
  vars= datos_imputados_propensity_2 %>% select(-c(Grup_IQ, identificador,standarized_weights,prediciones )) %>% names(),
  strata = "Grup_IQ", 
  data = iptwdatos_propensity_2, 
  addOverall = T,
  includeNA = T,
  smd =TRUE)

print(Propensity_table_Weighted_2, smd = TRUE)

```

# Filtrado de pacientes que no interesan 

Se puede utilizar el resultado de un propensity para encajar otro. en este caso. Utilizamos los resultados de un propensity previo para poder crear uno nuevo con restricción de casos outlier que no iban a encajar de ninguna forma   




```{r}
# Filtrado de pacientes excluídos por no encajar en ningún propensity score ----

Pacientes_excluidos_propensity <- datos_imputados_propensity_2 %>% 
  filter(!between(prediciones,0.1,0.80)) %>% # eliminamos los propensities extremos.  
  select(-c(prediciones,standarized_weights))

Pacientes_excluidos_propensity$identificador

# Filtrado de pacientes incluidos por  encajar en  propensity score ---- 

Pacientes_finales <- datos_imputados_propensity_2 %>% 
  filter(between(prediciones,0.1,0.80)) %>% 
  select(-c(prediciones,standarized_weights))

Pacientes_finales
```


# Modelo Propensity final 

### Ajuste del modelo


```{r}
mod_propensity_final <- glm(
  formula = Grup_IQ ~  
    SignesIndirectes_HTP + 
    HCC_prev +
    DIabetes +
    sexe_home +
    Enol_Actiu + 
    plaquetes_preIQ +
    log(sqrt(Charlson_Index)) +
    Alb_gL_preIQ +
    log(IMC) +
    Pughpunts_basal +
    log(BB_mgdL_preIQ) +
    Creat_mgdL_preIQ +
    INR_preIQ
  , 
  data = Pacientes_finales, 
  family=binomial(link="logit") )
```


### Sacando IPTW

```{r}
Pacientes_finales_IPTW <- Pacientes_finales %>% 
  mutate(prediciones=predict(mod_propensity_final,Pacientes_finales,type="response") ) %>% 
  mutate(standarized_weights = case_when(
    Grup_IQ == 'Si IQ' ~ (177/(371))/ (  prediciones),
    Grup_IQ == 'No IQ' ~ (194/(371))/ (1-prediciones) 
  )) 
```


### Revisión

```{r}

ggpubr::ggarrange(
  plotlist = list(
    Pacientes_finales_IPTW %>%
      ggplot(aes(standarized_weights, fill = Grup_IQ)) +
      geom_density() +
      labs(x = 'probabilidad de pertenecer grup Si en propensity')
    ,
    Pacientes_finales_IPTW %>%
      ggplot(aes(standarized_weights, fill = Grup_IQ)) +
      geom_density(alpha = 0.6) +
      labs(x = 'probabilidad de pertenecer grup Si en propensity')
    
    ,
    Pacientes_finales_IPTW %>%
      ggplot(aes(prediciones, fill = Grup_IQ)) +
      geom_histogram(color = 'black', alpha = 1) +
      labs(x = 'probabilidad de pertenecer grup Si en propensity')
    ,
    Pacientes_finales_IPTW %>%
      ggplot(aes(prediciones, fill = Grup_IQ)) +
      geom_histogram(color = 'black', alpha = 0.6) +
      labs(x = 'probabilidad de pertenecer grup Si en propensity')
  ))
  
```


```{r}
# Datos propensity ----

Pacientes_finales_iptw_survey <- svydesign(
  ids = ~ 1, 
  data = Pacientes_finales_IPTW,
  strata = ~Grup_IQ,
  weights = ~ Pacientes_finales_IPTW$standarized_weights)

Pacientes_finales_IPTW_table_Weighted <- svyCreateTableOne(
  vars= Pacientes_finales_IPTW %>% select(-c(Grup_IQ, identificador,standarized_weights,prediciones )) %>% names(),
  strata = "Grup_IQ", 
  data = Pacientes_finales_iptw_survey, 
  addOverall = T,
  includeNA = T,
  smd =TRUE)

print(Pacientes_finales_IPTW_table_Weighted , smd = TRUE)

```


# Ahora ya esta todo equilirbado

Ahora teniendo los id's de los pacientes en claro y estos pesos, podemos ir a hacer cualquier análisis que permita ponderación y se harán con una confusión perfectamente controlada.

regresiones lineales o modelos de supervivencia son las opciones más plausibles para este método. 

```{r}
Pacientes_finales_IPTW %>% 
  select(identificador, standarized_weights)
```




